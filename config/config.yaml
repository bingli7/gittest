--- # cucushift framework configuration options
global:
  git_repo_url: https://github.com/openshift/cucushift
  git_repo_default_branch: v3

  debug_in_after_hook: false
  debug_in_after_hook_always: false
  debug_attacher_timeout: false

  rest_default_auth: :bearer_token

  # base docker registry prefixes for quickstarts;
  #   (one is for the upstream community supported *projects* and the other one
  #   is for the Red Hat enterprise supported *products*);
  #   product one can be overriden by PRODUCT_DOCKER_REPO
  #   here "openshift" means "docker.io/openshift" as docker.io is the default
  #   repo; see examples in features/quickstarts/quickstarts.feature
  project_docker_repo: ""
  product_docker_repo: registry.access.redhat.com/

  # use CUCUSHIFT_DEFAULT_ENVIRONMENT instead of setting here
  # default_environment: ose

  # use CUCUSHIFT_TEST_CASE_MANAGER instead of setting here
  # test_case_manager: tcms

environments:
  ose:
    # hosts: use OPENSHIFT_ENV_OSE_HOSTS=host:role1:...,host2:role1:...
    hosts_type: SSHAccessibleHost
    # this is the user for remote access to the OpenShift nodes
    user: root
    type: StaticEnvironment
    user_manager: StaticUserManager
    # set users in OPENSHIFT_ENV_OSE_USER_MANAGER_USERS=user:password,...
    # user_manager_users: joe:redhat,alice:redhat
    #cli: MasterOsPerUserCliExecutor
    cli: SharedLocalCliExecutor
    admin_cli: MasterKubeconfigLocalAdminCliExecutor
    api_port: 8443
  origin:
    # hosts: use OPENSHIFT_ENV_ORIGIN_HOSTS=host:role1:...,host2:role1:...
    hosts_type: SSHAccessibleHost
    # this is the user for remote access to the OpenShift nodes
    user: fedora
    type: StaticEnvironment
    user_manager: StaticUserManager
    # set users in OPENSHIFT_ENV_ORIGIN_USER_MANAGER_USERS=user:password,...
    # user_manager_users: joe:redhat,alice:redhat
    cli: SharedLocalCliExecutor
    # cli: SharedLocalCliExecutor
    admin_cli: MasterKubeconfigLocalAdminCliExecutor
    api_port: 8443
  stage:
    hosts: api.stage.openshift.com:etcd:master:node
    web_console_url: https://console.stage.openshift.com
    hosts_type: Host # we can't basically access that host so this should work
    type: StaticEnvironment
    user_manager: StaticUserManager
    #set OPENSHIFT_ENV_STAGE_USER_MANAGER_USERS=:user_token1,:user_token2,...
    #user_manage_users:
    cli: SharedLocalCliExecutor
    admin_cli: false
  ded_stage_aws:
    hosts: api.ded-stage-aws.openshift.com:etcd:master:node
    web_console_url: https://console.ded-stage-aws.openshift.com
    hosts_type: Host # we can't basically access that host so this should work
    type: StaticEnvironment
    user_manager: StaticUserManager
    #set OPENSHIFT_ENV_DED_STAGE_AWS_USER_MANAGER_USERS=:user_token1,:user_token2,...
    #user_manage_users:
    cli: SharedLocalCliExecutor
    admin_cli: false
  engint:
    hosts: api.engint.openshift.com:etcd:master:node
    web_console_url: https://console.engint.openshift.com
    hosts_type: Host # we can't basically access that host so this should work
    type: StaticEnvironment
    user_manager: StaticUserManager
    #set OPENSHIFT_ENV_ENGINT_USER_MANAGER_USERS=:user_token1,:user_token2,...
    #user_manage_users:
    cli: SharedLocalCliExecutor
    admin_cli: false
  dev_preview_int:
    hosts: api.dev-preview-int.openshift.com:etcd:master:node
    web_console_url: https://console.dev-preview-int.openshift.com
    hosts_type: Host # we can't basically access that host so this should work
    type: StaticEnvironment
    user_manager: StaticUserManager
    #set OPENSHIFT_ENV_DEV_PREVIEW_INT_USER_MANAGER_USERS=:user_token1,:user_token2,...
    #user_manage_users:
    cli: SharedLocalCliExecutor
    admin_cli: false
  dev_preview_stg:
    hosts: api.dev-preview-stg.openshift.com:etcd:master:node
    web_console_url: https://console.dev-preview-stg.openshift.com
    hosts_type: Host # we can't basically access that host so this should work
    type: StaticEnvironment
    user_manager: StaticUserManager
    #set OPENSHIFT_ENV_DEV_PREVIEW_STG_USER_MANAGER_USERS=:user_token1,:user_token2,...
    #user_manage_users:
    cli: SharedLocalCliExecutor
    admin_cli: false
  online:
    hosts: api.preview.openshift.com:etcd:master:node
    web_console_url: https://console.preview.openshift.com
    hosts_type: Host # we can't basically access that host so this should work
    type: StaticEnvironment
    user_manager: StaticUserManager
    #set OPENSHIFT_ENV_ONLINE_USER_MANAGER_USERS=:user_token1,:user_token2,...
    #user_manage_users:
    cli: SharedLocalCliExecutor
    admin_cli: false
optional_classes:
  tcms_tc_manager:
    include_path: tcms/tcms_manager
    class: CucuShift::TCMSManager
    opts: {}
services:
  AWS:
    create_opts:
      # for all options see http://docs.aws.amazon.com/sdkforruby/api/Aws/EC2/Resource.html#create_instances-instance_method
      # the actual key-pair name is under the private repo and will be over-written
      key_name: "secret_key_pair"
      #instance_type: "c4.large"
      instance_type: "m3.medium"
      #image_id: my_image_id
      #subnet_id: my_subnet_id
      #placement:
      #  availability_zone: "us-east-1d"
      min_count: 1
      max_count: 1
      #security_groups: ["String"]
      #security_group_ids: ["String"]
      #block_device_mappings:
      #- device_name: "/dev/sda1"
      #  ebs:
      #    volume_size: 30
      #    volume_type: gp2

    config_opts:
      region: "us-east-1"

    tag_ready: "qe-ready"
    ami_types:
      fedora: "devenv-fedora_*"
      centos7: "devenv-centos7_*"
      rhel7: "devenv-rhel7_*"
      rhel7next: "devenv-rhel7next_*"
      devenv_v2: "devenv_*"
      devenv_stable_v2: "devenv-stage_*"
      raw: "ami-01743f64"
    hosts_type: SSHAccessibleHost
    cloud_type: aws
    # host_opts:
      # ssh_private_key: relative/path
      # user: the_username
  GCE:
    # project: yourproject
    zone: us-central1-a
    network: default
    scopes: &gce_client_scopes
      - https://www.googleapis.com/auth/compute
    # json_cred: path/to/serviceaccount/json/creds/unless/using/signet/below
    host_opts:
      # user: provisioned machine username
      # ssh_private_key: private/key/path
      class: SSHAccessibleHost
    # https://cloud.google.com/compute/docs/reference/latest/instances/insert
    instance_opts:
      # machine_type: url
      machine_type_name: n1-standard-1
      disks:
      - initialize_params:
          # source_image: projects/centos-cloud/global/images/centos-7-v20160216
          # source_snapshot: url
          image_name: rhel-guest-72
          # snapshot_name: xyz
          # img_snap_name: xyz
          disk_size_gb: 30
        boot: true
        auto_delete: true
      # - source: url # when creating with existing disk
      #   boot: true
      #   auto_delete: true
      network_interfaces:
        - :network: global/networks/default
          :access_configs: [{}]
      # metadata:
      #  items:
      #  - key: sshKeys
      #    # value: "root:ssh-rsa AAAAB3Nza... asd@dsa"
      #    # from_file: path/to/file/with/gcloud/style/ssh/pub/keys
      tags:
        items:
        - host-type-openshift-master
        - host-type-openshift-node
    signet_opts:
      audience: https://accounts.google.com/o/oauth2/token
      auth_provider_x509_cert_url: https://www.googleapis.com/oauth2/v1/certs
      # client_x509_cert_url: https://www.googleapis.com/robot/v1/metadata/x509/<serviceaccount email address>
      # issuer: <serviceaccount email address>
      scope: *gce_client_scopes
      # signing_key: |
      #  -----BEGIN RSA PRIVATE KEY-----
      #  ...
      #  -----END RSA PRIVATE KEY-----
      token_credential_uri: https://accounts.google.com/o/oauth2/token
    fix_hostnames: false
    cloud_type: gce
